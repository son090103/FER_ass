import React, { useState, useEffect } from "react";
import { Container, Table, Button, Form, Alert } from "react-bootstrap";
function Cart() {
    const [cart, setCart] = useState([]);
    const [selectedItems, setSelectedItems] = useState([]);
    const [loading, setLoading] = useState(true);

    const storedUser = localStorage.getItem("loggedInUser");
    const loggedInUser = storedUser ? JSON.parse(storedUser) : null;

    useEffect(() => {
        if (!loggedInUser) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng!");
            return;
        }

        fetch(`http://localhost:9999/accounts/${loggedInUser.id}`)
            .then((res) => res.json())
            .then((user) => {
                setCart(user.cart || []);
                setLoading(false);
            })
            .catch((error) => console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error));
    }, [loggedInUser]);

    // X·ª≠ l√Ω ch·ªçn/b·ªè ch·ªçn s·∫£n ph·∫©m
    const handleCheckboxChange = (productId) => {
        setSelectedItems((prev) =>
            prev.includes(productId) ? prev.filter((id) => id !== productId) : [...prev, productId]
        );
    };

    // X·ª≠ l√Ω x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    const handleRemoveItem = (productId) => {
        const updatedCart = cart.filter(item => item.id !== productId);

        fetch(`http://localhost:9999/accounts/${loggedInUser.id}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ cart: updatedCart })
        })
            .then(() => {
                alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!");
                setCart(updatedCart);
            })
            .catch(error => console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error));
    };

    // X·ª≠ l√Ω thanh to√°n
    const handleCheckout = () => {
        if (selectedItems.length === 0) {
            alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n!");
            return;
        }

        fetch(`http://localhost:9999/accounts/${loggedInUser.id}`)
            .then(res => res.json())
            .then(user => {
                const selectedProducts = cart.filter(item => selectedItems.includes(item.id));
                const updatedCart = cart.filter(item => !selectedItems.includes(item.id));

                const newOrder = {
                    id: Date.now().toString(),
                    items: selectedProducts,
                    total: selectedProducts.reduce((total, item) => total + item.price * item.quantity, 0),
                    date: new Date().toISOString(),
                    status: "ƒêang giao" // ‚úÖ Th√™m tr·∫°ng th√°i "ƒêang giao"
                };

                const updatedOrders = user.orders ? [...user.orders, newOrder] : [newOrder];

                fetch(`http://localhost:9999/accounts/${loggedInUser.id}`, {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orders: updatedOrders, cart: updatedCart })
                })
                    .then(() => {
                        alert("Thanh to√°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao.");
                        setCart(updatedCart);
                        setSelectedItems([]);
                    })
                    .catch(error => console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error));
            })
            .catch(error => console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error));
    };

    if (!loggedInUser) {
        return (
            <Container className="mt-5 text-center">
                <Alert variant="danger">B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!</Alert>
            </Container>
        );
    }

    return (
        <Container className="mt-5">
            <h2 className="text-center text-primary">üõí Gi·ªè H√†ng C·ªßa B·∫°n</h2>

            {loading ? (
                <p className="text-center">ƒêang t·∫£i gi·ªè h√†ng...</p>
            ) : cart.length === 0 ? (
                <Alert variant="info" className="text-center">Gi·ªè h√†ng tr·ªëng!</Alert>
            ) : (
                <>
                    <Table striped bordered hover className="mt-3 text-center">
                        <thead>
                        <tr>
                            <th>Ch·ªçn</th>
                            <th>·∫¢nh</th>
                            <th>T√™n s√°ch</th>
                            <th>Gi√°</th>
                            <th>S·ªë l∆∞·ª£ng</th>
                            <th>Th√†nh ti·ªÅn</th>
                            <th>H√†nh ƒë·ªông</th>
                        </tr>
                        </thead>
                        <tbody>
                        {cart.map((item) => (
                            <tr key={item.id}>
                                <td>
                                    <Form.Check
                                        type="checkbox"
                                        checked={selectedItems.includes(item.id)}
                                        onChange={() => handleCheckboxChange(item.id)}
                                    />
                                </td>
                                <td><img src={item.image} alt={item.title} width="80" /></td>
                                <td>{item.title}</td>
                                <td>{item.price.toLocaleString()} VNƒê</td>
                                <td>{item.quantity}</td>
                                <td>{(item.price * item.quantity).toLocaleString()} VNƒê</td>
                                <td>
                                    <Button variant="danger" size="sm" onClick={() => handleRemoveItem(item.id)}>
                                        X√≥a
                                    </Button>
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </Table>

                    <div className="text-center mt-4">
                        <Button variant="success" onClick={handleCheckout}>Mua h√†ng</Button>
                    </div>
                </>
            )}
        </Container>
    );
}

export default Cart;
